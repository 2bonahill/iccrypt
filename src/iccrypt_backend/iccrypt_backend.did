type Result = variant { Ok : text; Err : SmartVaultErr };
type Result_1 = variant { Ok : User; Err : SmartVaultErr };
type Result_2 = variant { Ok; Err : SmartVaultErr };
type Result_3 = variant { Ok : UserVault; Err : SmartVaultErr };
type Secret = record {
  id : nat;
  url : opt text;
  username : opt text;
  date_created : nat64;
  password : opt text;
  name : text;
  notes : opt text;
  category : SecretCategory;
  date_modified : nat64;
};
type SecretCategory = variant { Password; Note; Document };
type SecretForFrontend = record {
  url : opt text;
  username : opt text;
  password : opt text;
  name : text;
  notes : opt text;
  category : SecretCategory;
};
type SmartVaultErr = variant {
  UserAlreadyExists : text;
  UserDeletionFailed : text;
  UserVaultCreationFailed : text;
  UserDoesNotExist : text;
  UserVaultDoesNotExist : text;
};
type User = record {
  id : principal;
  date_created : nat64;
  date_last_login : opt nat64;
  user_vault_id : nat;
  date_modified : nat64;
};
type UserVault = record {
  id : nat;
  date_created : nat64;
  secrets : vec record { nat; Secret };
  date_modified : nat64;
};
service : {
  add_user_secret : (SecretForFrontend) -> (Result);
  create_user : () -> (Result_1);
  delete_user : () -> (Result_2);
  get_decryption_key_from : (text) -> (opt vec nat8);
  get_encryption_key_for : (text) -> (opt vec nat8);
  get_user_vault : () -> (Result_3) query;
  is_user_vault_existing : () -> (bool) query;
  update_user_secret : (Secret) -> (Result_2);
}