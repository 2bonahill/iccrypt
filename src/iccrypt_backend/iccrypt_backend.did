type Result = variant { Ok : User; Err : SmartVaultErr };
type Secret = record {
  id : text;
  url : opt text;
  username : opt text;
  date_created : nat64;
  owner : principal;
  password : opt text;
  name : text;
  notes : opt text;
  category : SecretCategory;
  date_modified : nat64;
};
type SecretCategory = variant { Password; Note; Document };
type SmartVaultErr = variant {
  UserAlreadyExists : text;
  UserVaultAlreadyExists : text;
  UserVaultCreationFailed : text;
};
type User = record {
  id : principal;
  date_created : nat64;
  date_last_login : opt nat64;
  date_modified : nat64;
};
type UserVault = record {
  date_created : nat64;
  owner : principal;
  secrets : vec record { text; Secret };
  date_modified : nat64;
};
service : {
  add_user_secret : (principal, SecretCategory, text) -> ();
  create_user : (principal) -> (Result);
  delete_user : (principal) -> ();
  get_decryption_key_from : (principal) -> (opt vec nat8);
  get_encryption_key_for : (principal) -> (opt vec nat8);
  get_user_vault : (principal) -> (opt UserVault) query;
  give_me_a_new_uuid : () -> (text);
  is_user_vault_existing : (principal) -> (bool) query;
  update_user_secret : (principal, Secret) -> ();
  what_time_is_it : () -> (nat64) query;
  who_am_i : () -> (text) query;
}